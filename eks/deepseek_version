# **Automated AWS EKS Deployment with Terraform & GitOps**  
**A Hands-On Project for Production-Grade Kubernetes Clusters**  

**Author:** Senior DevOps Engineer  
**Last Updated:** 2024  

---

## **Project Overview**  
This project automates the deployment of a **scalable AWS EKS cluster** using **Terraform**, integrating **managed node groups**, **IAM roles**, **VPC networking**, and **ALB Ingress Controller**. We'll implement **GitOps practices** by syncing Terraform state with **GitHub Actions** for CI/CD-driven infrastructure updates.  

### **Key Features**  
âœ… **Fully automated EKS cluster provisioning** (<10 minutes)  
âœ… **Managed node groups** for auto-scaling worker nodes  
âœ… **Secure IAM integration** with least-privilege policies  
âœ… **ALB Ingress Controller** for Kubernetes load balancing  
âœ… **GitOps workflow** using GitHub Actions for Terraform state management  

---

## **Prerequisites**  
Before starting, ensure you have:  
1. **AWS Account** with admin permissions  
2. **AWS CLI** configured (`aws configure`)  
3. **Terraform** installed (`v1.5+`)  
4. **kubectl** installed  
5. **GitHub Account** (for CI/CD)  

---

## **Step 1: Project Structure**  
Create a Terraform project with the following structure:  
```bash
eks-terraform-gitops/  
â”œâ”€â”€ .github/workflows/  
â”‚   â””â”€â”€ terraform-ci.yml  
â”œâ”€â”€ modules/  
â”‚   â”œâ”€â”€ eks/  
â”‚   â”‚   â”œâ”€â”€ main.tf  
â”‚   â”‚   â”œâ”€â”€ variables.tf  
â”‚   â”‚   â””â”€â”€ outputs.tf  
â”‚   â”œâ”€â”€ vpc/  
â”‚   â”‚   â”œâ”€â”€ main.tf  
â”‚   â”‚   â”œâ”€â”€ variables.tf  
â”‚   â”‚   â””â”€â”€ outputs.tf  
â”‚   â””â”€â”€ iam/  
â”‚       â”œâ”€â”€ main.tf  
â”‚       â”œâ”€â”€ variables.tf  
â”‚       â””â”€â”€ outputs.tf  
â”œâ”€â”€ main.tf  
â”œâ”€â”€ variables.tf  
â”œâ”€â”€ outputs.tf  
â””â”€â”€ README.md  
```

---

## **Step 2: Terraform Modules**  

### **1. VPC Module (`modules/vpc/`)**  
Creates a **VPC, subnets, NAT Gateway, and security groups** for EKS.  

**`modules/vpc/main.tf`**  
```hcl
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 5.0"

  name = "eks-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway   = true
  single_nat_gateway   = true
  enable_dns_hostnames = true

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}
```

---

### **2. IAM Module (`modules/iam/`)**  
Configures **IAM roles for EKS and node groups**.  

**`modules/iam/main.tf`**  
```hcl
resource "aws_iam_role" "eks_cluster" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster.name
}
```

---

### **3. EKS Module (`modules/eks/`)**  
Deploys **EKS cluster + managed node groups**.  

**`modules/eks/main.tf`**  
```hcl
module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 19.0"

  cluster_name    = "my-eks-cluster"
  cluster_version = "1.28"

  vpc_id          = var.vpc_id
  subnets         = var.private_subnets

  eks_managed_node_groups = {
    default = {
      desired_capacity = 2
      max_capacity     = 3
      min_capacity     = 1

      instance_type = "t3.medium"
    }
  }

  tags = {
    Environment = "dev"
  }
}
```

---

## **Step 3: Root Module (`main.tf`)**  
Ties all modules together.  

**`main.tf`**  
```hcl
module "vpc" {
  source = "./modules/vpc"
}

module "iam" {
  source = "./modules/iam"
}

module "eks" {
  source       = "./modules/eks"
  vpc_id       = module.vpc.vpc_id
  private_subnets = module.vpc.private_subnets
}
```

---

## **Step 4: ALB Ingress Controller Setup**  
After EKS is deployed, install the **AWS Load Balancer Controller** for ingress management.  

```bash
kubectl apply -f https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.5.4/v2_5_4_full.yaml
```

---

## **Step 5: GitHub Actions CI/CD**  
Automate Terraform deployments using GitHub Actions.  

**`.github/workflows/terraform-ci.yml`**  
```yaml
name: Terraform CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
```

---

## **Step 6: Testing the Deployment**  

1. **Apply Terraform:**  
   ```bash
   terraform init
   terraform plan
   terraform apply
   ```

2. **Verify EKS Cluster:**  
   ```bash
   aws eks --region us-east-1 update-kubeconfig --name my-eks-cluster
   kubectl get nodes
   ```

3. **Deploy a Sample App:**  
   ```bash
   kubectl create deployment nginx --image=nginx
   kubectl expose deployment nginx --port=80 --type=LoadBalancer
   kubectl get svc
   ```

---

## **Conclusion**  
âœ… **Automated EKS cluster deployment** in <10 minutes  
âœ… **Secure IAM & VPC setup**  
âœ… **GitOps-driven CI/CD** with GitHub Actions  

This project is **production-ready** and can be extended with **ArgoCD, monitoring (Prometheus/Grafana), and security policies (OPA)**.  

---

**Next Steps:**  
ðŸ”¹ Implement **cluster autoscaling (Karpenter)**  
ðŸ”¹ Add **Prometheus monitoring**  
ðŸ”¹ Enforce **security policies with OPA Gatekeeper**  

Would you like a deep dive into any of these extensions? ðŸš€